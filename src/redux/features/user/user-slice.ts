import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { AppDispatch, RootState } from "~/redux/store";
import { UserIsFailed, UserIsGuest, UserIsLoggedIn, userPromise } from "./user-class";

export type UserState = {
    status: "guest" | "loggedIn" | "loggingIn" | "loggingOut" | "failed";
    username?: string;
    admin?: boolean;
    error?: {
        code: number;
        text: string;
    };
};

const initialState: UserState = {
    status: "guest",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getUser = createAsyncThunk<
    UserState,
    void,
    {
        dispatch: AppDispatch;
        state: RootState;
    }
>(
    "user/fetchUser",
    async () => {
        const user = await userPromise;

        return user.state;
    },
    {
        condition(_arg, { getState }) {
            const user = selectUser(getState());

            if (user.status === "loggingIn" || user.status === "loggedIn") {
                return false;
            }
        },
    },
);

export const loginUser = createAsyncThunk<
    UserIsLoggedIn | UserIsFailed,
    { username: string; password: string; consistOverSession: boolean },
    {
        dispatch: AppDispatch;
        state: RootState;
    }
>(
    "user/loginUser",
    async (credentials) => {
        const user = await userPromise;

        const state = await user.login(
            credentials.username,
            credentials.password,
            credentials.consistOverSession,
        );

        return state;
    },
    {
        condition(_arg, { getState }) {
            const user = selectUser(getState());

            if (user.status === "loggingIn" || user.status === "loggedIn") {
                return false;
            }
        },
    },
);

export const logoutUser = createAsyncThunk<
    UserIsGuest,
    void,
    {
        dispatch: AppDispatch;
        state: RootState;
    }
>(
    "user/logoutUser",
    async () => {
        const user = await userPromise;

        const state = await user.logout();

        return state;
    },
    {
        condition(_arg, { getState }) {
            const user = selectUser(getState());

            if (user.status !== "loggedIn") {
                return false;
            }
        },
    },
);

export const userSlice = createSlice({
    name: "user",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getUser.pending, (state) => {
                state.status = "loggingIn";
                state.username = undefined;
                state.admin = undefined;
                state.error = undefined;
            })
            .addCase(getUser.fulfilled, (state, action) => {
                switch (action.payload.status) {
                    case "loggedIn":
                        state.status = "loggedIn";
                        state.username = action.payload.username;
                        state.admin = action.payload.admin;
                        state.error = undefined;
                        break;
                    case "failed":
                        state.status = "failed";
                        state.error = action.payload.error;
                        state.username = undefined;
                        state.admin = undefined;
                        break;
                    case "guest":
                    default:
                        state.status = "guest";
                        state.username = undefined;
                        state.admin = undefined;
                        state.error = undefined;
                        break;
                }
            })
            .addCase(getUser.rejected, (state, action) => {
                state.status = "failed";

                const code = Number(action.error?.code ?? "0");

                state.error = {
                    code: Number.isSafeInteger(code) ? code : 0,
                    text: action.error?.name ?? "",
                };
            })
            .addCase(loginUser.pending, (state) => {
                state.status = "loggingIn";
                state.username = undefined;
                state.admin = undefined;
                state.error = undefined;
            })
            .addCase(loginUser.fulfilled, (state, action) => {
                switch (action.payload.status) {
                    case "loggedIn":
                        state.status = "loggedIn";
                        state.username = action.payload.username;
                        state.admin = action.payload.admin;
                        state.error = undefined;
                        break;
                    case "failed":
                        state.status = "failed";
                        state.error = action.payload.error;
                        state.username = undefined;
                        state.admin = undefined;
                        break;
                    default:
                        state.status = "guest";
                        state.username = undefined;
                        state.admin = undefined;
                        state.error = undefined;
                        break;
                }
            })
            .addCase(loginUser.rejected, (state, action) => {
                state.status = "failed";

                const code = Number(action.error?.code ?? "0");

                state.error = {
                    code: Number.isSafeInteger(code) ? code : 0,
                    text: action.error?.name ?? "",
                };
            })
            .addCase(logoutUser.pending, (state) => {
                state.status = "loggingOut";
            })
            .addCase(logoutUser.fulfilled, (state) => {
                state.status = "guest";
                state.username = undefined;
                state.admin = undefined;
                state.error = undefined;
            })
            .addCase(logoutUser.rejected, (state) => {
                state.status = "guest";
                state.username = undefined;
                state.admin = undefined;
                state.error = undefined;
            });
    },
});

// export const {  } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state: RootState) => state.user;

export default userSlice.reducer;
