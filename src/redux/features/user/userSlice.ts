import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "~/redux/store";
import { fetchUser } from "./userAPI";
import type { User } from "./userTypes";

export type UserState = {
    user: User | null;
    status: "idle" | "loading" | "failed";
};

const initialState: UserState = {
    user: null,
    status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getUser = createAsyncThunk("user/fetchUser", async (id: string) => {
    const response = await fetchUser(id);
    // The value we return becomes the `fulfilled` action payload
    return response;
});

export const userSlice = createSlice({
    name: "user",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        /* getUser: (state) => {

        }, */
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getUser.pending, (state) => {
                state.status = "loading";
            })
            .addCase(getUser.fulfilled, (state, action) => {
                state.status = "idle";
                state.user = action.payload;
            })
            .addCase(getUser.rejected, (state) => {
                state.status = "failed";
            });
    },
});

// export const {  } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state: RootState) => state.user.user;

export default userSlice.reducer;
